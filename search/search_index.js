var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"Welcome to the Wired World","text":""},{"location":"changelog.html","title":"\u65f6\u95f4\u7ebf","text":""},{"location":"changelog.html#2024","title":"2024","text":"2024-01-24\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 06.Direct Execution</p> 2024-01-23\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 06.Direct Execution</p> 2024-01-23\u00b6 <p> CS &gt; Programming Language &amp; ISA &gt; C &gt; Including C Files Over HTTPS</p> 2024-01-17\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 05.Process API</p> 2024-01-16\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 04.Processes</p> 2024-01-12\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 02.Introduction \u6dfb\u52a0\u201c\u6301\u4e45\u6027\u201d\u548c\u201c\u7b80\u5355\u5386\u53f2\u201d\u5c0f\u8282</p> 2024-01-12\u00b6 <p> CS &gt; OS &gt; OSTEP &gt; 02.Introduction</p> 2024-01-12\u00b6 <p> \u4f7f\u7528 Vercel \u90e8\u7f72</p> 2024-01-12\u00b6 <p> \u7b14\u8bb0\u672c\u4e0a\u7ebf\uff0cWelcome to the Wired World!</p>"},{"location":"todo.html","title":"\u5f85\u529e\u4e8b\u9879","text":"<p>\u5f85\u529e\u4e0d\u4ee3\u8868\u6b63\u5728\u529e\u6216\u4e00\u5b9a\u4f1a\u529e\uff0c\u552f\u4e00\u786e\u8ba4\u7684\u662f\u5b83\u4eec\u90fd\u672a\u5b8c\u6210\u3002</p>"},{"location":"todo.html#_2","title":"\u7b14\u8bb0","text":"<ul> <li> OSTEP \u5b66\u4e60\u7b14\u8bb0</li> <li> rCore \u5b66\u4e60\u7b14\u8bb0\uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9e\u73b0\u65f6\u7684\u4e00\u4e9b\u6539\u8fdb\u60f3\u6cd5</li> <li> MIT 6.1810 \u5b66\u4e60\u7b14\u8bb0\uff0cxv6 \u6e90\u7801\u5206\u6790</li> <li> \u4e00\u4e9b\u6e38\u620f\u76f8\u5173\u7684 AI \u5de5\u4f5c\u6d41</li> <li> \u6709\u5173\u6e38\u620f\u8bbe\u8ba1\u7684\u8ba8\u8bba\u4f1a\u8bb0\u5f55</li> <li> \u7f16\u8bd1\u5668\u524d\u7aef</li> <li> Lisp \u89e3\u91ca\u5668\u7684 Rust \u5b9e\u73b0</li> <li> \u7f16\u7a0b\u8bed\u8a00<ul> <li> \u73b0\u4ee3 C \u8bed\u8a00\u7f16\u7a0b</li> <li> Python \u4e0d\u5e38\u89c1\u7279\u6027</li> <li> Rust -&gt; Zig \u901f\u901a</li> <li> \u4e00\u4e9b\u5947\u602a\u7684\u201c\u9ed1\u9b54\u6cd5\u201d<ul> <li> \u901a\u8fc7 HTTPS \u5305\u542b C \u5934\u6587\u4ef6</li> <li> ...</li> </ul> </li> </ul> </li> <li> \u4ee5\u5f80\u7684 CTF \u6bd4\u8d5b\u9898\u89e3</li> <li> CTF \u51fa\u9898\u7ecf\u9a8c<ul> <li> \u4f7f\u7528 GitHub \u4ed3\u5e93\u534f\u4f5c\u51fa\u9898\u3001\u6784\u5efa\u955c\u50cf</li> </ul> </li> <li> \u8ba1\u7b97\u673a\u81ea\u6551\u6307\u5357\uff08\u53d7\u4eba\u59d4\u6258\uff0c\u5199\u51e0\u7bc7\u8ba1\u7b97\u673a\u5165\u95e8\u6307\u5357\uff09<ul> <li> \u5982\u4f55\u63d0\u95ee</li> <li> \u786c\u4ef6\u9009\u8d2d</li> <li> \u7535\u8111\u65e5\u5e38\u4f7f\u7528\u4e60\u60ef<ul> <li> \u8f6f\u4ef6\u9009\u62e9</li> <li> \u5b89\u5168\u95ee\u9898</li> <li> \u9690\u79c1\u4fdd\u62a4</li> <li> ...</li> </ul> </li> <li> \u4fdd\u6301\u7f51\u7edc\u7545\u901a</li> <li> \u5916\u8bed</li> <li> \u4fe1\u606f\u6e90<ul> <li> \u641c\u7d22\u5f15\u64ce</li> <li> \u8bba\u575b\uff0c\u535a\u5ba2</li> <li> RSS</li> <li> \u4e66\u7c4d</li> <li> \u5982\u4f55\u5224\u65ad\u4fe1\u606f\u6e90\u8d28\u91cf</li> </ul> </li> <li> \u5982\u4f55\u9605\u8bfb\u6587\u6863</li> <li> AI</li> <li> \u7f16\u7a0b\u8bed\u8a00\u9009\u62e9</li> <li> \u5de5\u5177\u9009\u62e9</li> <li> \u5404\u5b66\u79d1\u524d\u7f6e\u77e5\u8bc6</li> <li> ...</li> </ul> </li> </ul>"},{"location":"todo.html#_3","title":"\u7f51\u7ad9\u5efa\u8bbe","text":"<ul> <li> \u4e3b\u9875</li> <li> \u4eae\u8272\u6a21\u5f0f\u4e0b\u66f4\u597d\u7684\u4ee3\u7801\u9ad8\u4eae\u914d\u8272\u65b9\u6848</li> </ul>"},{"location":"cs/index.html","title":"Computer Science","text":""},{"location":"cs/index.html#table-of-contents","title":"Table of Contents","text":"Programming Language &amp; ISA          <ul> <li> C  169  13  1 mins              1706003495 </li> <li> Rust  1  0 mins              1705020272 </li> <li> Python  1  0 mins              1705012002 </li> <li> Racket  1  0 mins              1705012002 </li> <li> RISC-V ISA  2  0 mins              1705012002 </li> </ul> Operating System          <ul> <li> OSTEP  5716  533  26 mins              1706096454 </li> <li> MIT 6.1810  0  0 mins              0 </li> <li> rCore  0  0 mins              0 </li> </ul> Compiler          <ul> </ul>"},{"location":"cs/compiler/index.html","title":"Compiler","text":""},{"location":"cs/os/index.html","title":"Operating System","text":""},{"location":"cs/os/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>OSTEP \u5b66\u4e60\u7b14\u8bb0</li> <li>MIT 6.1810: Operating System Engineering \u5b66\u4e60\u7b14\u8bb0</li> <li>rCore-Tutorial-Book-v3 \u5b66\u4e60\u7b14\u8bb0</li> </ul>"},{"location":"cs/os/mit6.1810.html","title":"MIT 6.1810: Operating System Engineering \u5b66\u4e60\u7b14\u8bb0","text":""},{"location":"cs/os/rcore.html","title":"rCore-Tutorial-Book-v3 \u5b66\u4e60\u7b14\u8bb0","text":""},{"location":"cs/os/ostep/index.html","title":"OSTEP \u5b66\u4e60\u7b14\u8bb0","text":"<p>\u8d44\u6e90</p> <ul> <li>OSTEP</li> <li>OSTEP \u4e2d\u6587\u7ffb\u8bd1</li> <li>OSTEP \u4e66\u4e2d\u4ee3\u7801</li> <li>OSTEP \u4f5c\u4e1a\u6240\u9700\u4ee3\u7801</li> </ul>"},{"location":"cs/os/ostep/index.html#table-of-contents","title":"Table of Contents","text":""},{"location":"cs/os/ostep/index.html#virtualization","title":"Virtualization","text":"<ul> <li>02.Introduction</li> <li>04.Processes</li> <li>05.Process API</li> <li>06.Direct Execution</li> </ul>"},{"location":"cs/os/ostep/02introduction.html","title":"\u7b2c 2 \u7ae0 \u64cd\u4f5c\u7cfb\u7edf\u4ecb\u7ecd","text":"<p>\u8fd9\u7ae0\u5f15\u5165\u4e86\u8bfe\u7a0b\u7684\u4e09\u4e2a\u4e3b\u9898\uff0c\u4e5f\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e09\u4e2a\u91cd\u8981\u529f\u80fd\uff1a</p> <ol> <li>\u865a\u62df\u5316</li> <li>\u5e76\u53d1</li> <li>\u6301\u4e45\u6027</li> </ol> <p>\u4f5c\u8005\u4ecb\u7ecd\u7684\u65f6\u5019\u7528\u4e86\u4e00\u4e9b\u4ee3\u7801\u793a\u4f8b\uff0c\u5176\u4e2d\u8bb8\u591a\u51fd\u6570\u90fd\u88ab\u523b\u610f\u5305\u88c5\u4e86\u4e00\u5c42\uff0c\u4e0d\u77e5\u9053\u662f\u56e0\u4e3a\u4ec0\u4e48\uff0c\u5f88\u591a\u5305\u88c5\u611f\u89c9\u90fd\u4e0d\u592a\u5fc5\u8981\uff0c\u4e00\u4e9b\u4ee3\u7801\u4e5f\u6ca1\u90a3\u4e48\u89c4\u8303\uff0c\u4f5c\u4e3a\u793a\u4f8b\u5012\u662f\u65e0\u4f24\u5927\u96c5\u3002</p> <p>\u4e00\u5f00\u59cb\u6211\u4e0d\u77e5\u9053\u6709\u9644\u5f55\u4ee3\u7801\uff0c\u5168\u90fd\u91cd\u65b0\u6539\u4e86\u4e00\u904d\u3002</p> <p>\u9644\u5f55\u4ee3\u7801\uff1agithub.com/remzi-arpacidusseau/ostep-code/</p>"},{"location":"cs/os/ostep/02introduction.html#21-cpu","title":"2.1 \u865a\u62df\u5316 CPU","text":"cpu.c<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) {\n    fprintf(stderr, \"usage: cpu &lt;string&gt;\\n\");\n    exit(1);\n  }\n  char *str = argv[1];\n  for (int i = 0; i &lt; 5; i++) {\n    sleep(1);\n    printf(\"%s\\n\", str);\n  }\n}\n</code></pre> <pre><code>$ ./cpu A &amp; ; ./cpu B &amp; ; ./cpu C &amp; ; ./cpu D &amp;\n</code></pre> <p>\u5c31\u80fd\u770b\u5230\u7a0b\u5e8f\u5728\u201c\u540c\u65f6\u8fd0\u884c\u201d\u7684\u5047\u8c61\u3002</p>"},{"location":"cs/os/ostep/02introduction.html#22","title":"2.2 \u865a\u62df\u5316\u5185\u5b58","text":"mem.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n  int *p = malloc(sizeof(int)); // a1\n  assert(p != NULL);\n  printf(\"(%d) memory address of p: %p\\n\", getpid(), p); // a2\n  *p = 0;                                                // a3\n  for (int i = 0; i &lt; 5; i++) {\n    sleep(1);\n    *p = *p + 1;\n    printf(\"(%d) p: %d\\n\", getpid(), *p); // a4\n  }\n  free(p);\n  return 0;\n}\n</code></pre> <p>\u5982\u679c\u8981\u5f97\u5230\u548c\u4e66\u4e2d\u4e00\u6837\u7684\u6548\u679c\uff0c\u8fd8\u9700\u8981\u5173\u95ed ASLR \u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff0c\u4e0d\u7136\u5c31\u7b97\u662f\u865a\u62df\u5185\u5b58\uff0c\u6bcf\u6b21\u5206\u914d\u7684\u5730\u5740\u4e5f\u662f\u4e0d\u56fa\u5b9a\u7684\u3002</p> <pre><code>$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre> <p>\u5982\u679c\u7f16\u8bd1\u65f6\u5173\u6389 PIE \uff0c\u5f97\u5230\u7684\u5730\u5740\u4f1a\u66f4\u201c\u597d\u770b\u201d\u4e9b\uff0c\u66f4\u63a5\u8fd1\u4e66\u4e2d\u5185\u5bb9\u3002</p> <pre><code>$ gcc mem.c -o mem -no-pie\n</code></pre> <pre><code>$ ./mem &amp;; ./mem &amp; # (1)!\n(63585) memory address of p: 0x4052a0\n(63586) memory address of p: 0x4052a0\n(63585) p: 1\n(63586) p: 1\n(63585) p: 2\n(63586) p: 2\n(63586) p: 3\n(63585) p: 3\n(63586) p: 4\n(63585) p: 4\n(63586) p: 5\n(63585) p: 5\n</code></pre> <ol> <li><code>&amp;</code> \u7b26\u53f7\u7528\u4e8e\u5728 Unix-like \u7cfb\u7edf\u4e2d\u540e\u53f0\u8fd0\u884c\u8fdb\u7a0b\uff0c\u5b83\u4f1a\u542f\u52a8\u547d\u4ee4\u7136\u540e\u7acb\u5373\u8fd4\u56de\u5230\u547d\u4ee4\u884c\u63d0\u793a\u7b26\uff0c\u800c\u4e0d\u662f\u6302\u8d77\u76f4\u5230\u547d\u4ee4\u5b8c\u6210\u3002\u4e0d\u540c\u7684 shell \u53ef\u80fd\u5b9e\u73b0\u65b9\u5f0f\u4e0d\u540c\uff0c\u4f46\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\u3002\u6700\u7ec8\u7684\u6548\u679c\u5c31\u662f\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a <code>mem</code> \u7a0b\u5e8f\u3002</li> </ol> <p>\u5b9e\u9a8c\u5b8c\u5c3d\u5feb\u628a ASLR \u6539\u56de\u53bb\uff0c\u4ee5\u514d\u5bf9\u7cfb\u7edf\u5b89\u5168\u9020\u6210\u5f71\u54cd\uff0c\u73b0\u4ee3 Linux \u7cfb\u7edf\u4e2d <code>/proc/sys/kernel/randomize_va_space</code> \u5185\u5bb9\u4e00\u822c\u90fd\u662f <code>2</code> \uff0c\u610f\u4e3a\u66f4\u5f3a\u7684\u968f\u673a\u5316\u3002</p> <pre><code>$ echo 2 | sudo tee /proc/sys/kernel/randomize_va_space\n</code></pre> <p>\u5173\u952e\u95ee\u9898\uff1a\u5982\u4f55\u5c06\u8d44\u6e90\u865a\u62df\u5316</p> <p>\u6211\u4eec\u5c06\u5728\u672c\u4e66\u4e2d\u56de\u7b54\u4e00\u4e2a\u6838\u5fc3\u95ee\u9898\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u5c06\u8d44\u6e90\u865a\u62df\u5316\uff1f\u8fd9\u662f\u5173\u952e\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u64cd\u4f5c\u7cfb\u7edf\u8fd9\u6837\u505a\uff1f\u8fd9\u4e0d\u662f\u4e3b\u8981\u95ee\u9898\uff0c\u56e0\u4e3a\u7b54\u6848\u5e94\u8be5\u5f88\u660e\u663e\uff1a\u5b83\u8ba9\u7cfb\u7edf\u66f4\u6613\u4e8e\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5173\u6ce8\u5982\u4f55\u865a\u62df\u5316\uff1a</p> <ol> <li>\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u54ea\u4e9b\u673a\u5236\u548c\u7b56\u7565\u6765\u5b9e\u73b0\u865a\u62df\u5316\uff1f</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u6709\u6548\u5730\u5b9e\u73b0\u865a\u62df\u5316\uff1f</li> <li>\u9700\u8981\u54ea\u4e9b\u786c\u4ef6\u652f\u6301\uff1f</li> </ol>"},{"location":"cs/os/ostep/02introduction.html#23","title":"2.3 \u5e76\u53d1","text":"threads.c<pre><code>#include &lt;pthread.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvolatile int counter = 0;\nint loops;\n\nvoid *worker(void *arg) {\n  int i;\n  for (i = 0; i &lt; loops; i++) {\n    counter++;\n  }\n  return NULL;\n}\n\nint main(int argc, char *argv[]) {\n  if (argc != 2) {\n    fprintf(stderr, \"usage: threads &lt;value&gt;\\n\");\n    exit(1);\n  }\n  loops = atoi(argv[1]);\n  pthread_t p1, p2;\n  printf(\"Initial value : %d\\n\", counter);\n\n  pthread_create(&amp;p1, NULL, worker, NULL);\n  pthread_create(&amp;p2, NULL, worker, NULL);\n  pthread_join(p1, NULL);\n  pthread_join(p2, NULL);\n  printf(\"Final value : %d\\n\", counter);\n  return 0;\n}\n</code></pre> <pre><code>$ ./threads 100000\nInitial value : 0\nFinal value : 140997\n$ ./threads 100000\nInitial value : 0\nFinal value : 119700\n$ ./threads 100000\nInitial value : 0\nFinal value : 129215\n</code></pre> <p>\u5173\u952e\u95ee\u9898\uff1a\u5982\u4f55\u6784\u5efa\u6b63\u786e\u7684\u5e76\u53d1\u7a0b\u5e8f</p> <p>\u5982\u679c\u540c\u4e00\u4e2a\u5185\u5b58\u7a7a\u95f4\u4e2d\u6709\u5f88\u591a\u5e76\u53d1\u6267\u884c\u7684\u7ebf\u7a0b\uff0c\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u6b63\u786e\u5de5\u4f5c\u7684\u7a0b\u5e8f\uff1f</p> <ol> <li>\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u4ec0\u4e48\u539f\u8bed\uff1f</li> <li>\u786c\u4ef6\u5e94\u8be5\u63d0\u4f9b\u54ea\u4e9b\u673a\u5236\uff1f</li> <li>\u6211\u4eec\u5982\u4f55\u5229\u7528\u5b83\u4eec\u6765\u89e3\u51b3\u5e76\u53d1\u95ee\u9898\uff1f</li> </ol>"},{"location":"cs/os/ostep/02introduction.html#24","title":"2.4 \u6301\u4e45\u6027","text":"<p>\u5176\u5b9e\u5c31\u662f\u6587\u4ef6\u7cfb\u7edf\u3002</p> io.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(int argc, char *argv[]) {\n  int fd = open(\"/tmp/file\", O_WRONLY | O_CREAT | O_TRUNC, S_IRWXU);\n  assert(fd &gt; -1);\n  int rc = write(fd, \"hello world\\n\", 13);\n  assert(rc == 13);\n  close(fd);\n  return 0;\n}\n</code></pre> <p>\u5173\u952e\u95ee\u9898\uff1a\u5982\u4f55\u6301\u4e45\u5730\u5b58\u50a8\u6570\u636e</p> <p>\u6587\u4ef6\u7cfb\u7edf\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u8d1f\u8d23\u7ba1\u7406\u6301\u4e45\u7684\u6570\u636e\u3002</p> <ol> <li>\u6301\u4e45\u6027\u9700\u8981\u54ea\u4e9b\u6280\u672f\u624d\u80fd\u6b63\u786e\u5730\u5b9e\u73b0\uff1f</li> <li>\u9700\u8981\u54ea\u4e9b\u673a\u5236\u548c\u7b56\u7565\u624d\u80fd\u9ad8\u6027\u80fd\u5730\u5b9e\u73b0\uff1f</li> <li>\u9762\u5bf9\u786c\u4ef6\u548c\u8f6f\u4ef6\u6545\u969c\uff0c\u53ef\u9760\u6027\u5982\u4f55\u5b9e\u73b0\uff1f</li> </ol>"},{"location":"cs/os/ostep/02introduction.html#26","title":"2.6 \u7b80\u5355\u5386\u53f2","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u53d1\u5c55\u5386\u53f2\uff1a</p> <ul> <li>\u51fd\u6570\u5e93</li> <li>\u6279\u5904\u7406\u7cfb\u7edf</li> <li>\u7279\u6743\u7ea7\u548c\u7cfb\u7edf\u8c03\u7528</li> <li>\u591a\u9053\u7a0b\u5e8f</li> <li>\u5206\u65f6\u591a\u4efb\u52a1</li> <li>\u5185\u5b58\u4fdd\u62a4</li> <li>\u5e76\u53d1</li> <li>...</li> </ul>"},{"location":"cs/os/ostep/04processes.html","title":"\u7b2c 4 \u7ae0 \u62bd\u8c61\uff1a\u8fdb\u7a0b","text":"<p>\u8fd9\u7ae0\u4ecb\u7ecd\u4e86\u8fdb\u7a0b\u7684\u6982\u5ff5\uff0c\u4e3a\u4e86\u865a\u62df\u5316 CPU \u505a\u94fa\u57ab\u3002</p> <p>\u8fdb\u7a0b\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u65e2\u7136\u6b63\u5728\u8fd0\u884c\uff0c\u90a3\u5c31\u80af\u5b9a\u6709\u72b6\u6001\uff0c\u5305\u62ec\u7a0b\u5e8f\u7684\u5bc4\u5b58\u5668\u503c\u4ee5\u53ca\u7528\u5230\u7684\u5185\u5b58\u503c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5206\u914d\u4e00\u4e9b\u5185\u5b58\u5c06\u5b83\u4eec\u9700\u8981\u4fdd\u5b58\u4e0b\u6765\u3002</p> <p>\u4fdd\u5b58\u662f\u4e3a\u4e86\u5207\u6362\uff0c\u5207\u6362\u662f\u56e0\u4e3a\u9700\u8981\u8c03\u5ea6\uff0c\u8c03\u5ea6\u662f\u4e3a\u4e86\u6700\u5927\u5316\u5229\u7528\u7cfb\u7edf\u8d44\u6e90\u3002</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u4efb\u610f\u5207\u6362\u7684\u201c\u65e0\u9650\u201d\u591a CPU \u7684\u5047\u8c61\uff0c\u6211\u4eec\u9700\u8981 \u865a\u62df\u5316 CPU \u548c \u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u8fd9\u662f\u540e\u9762\u7ae0\u8282\u7684\u5185\u5bb9\u3002</p> <p>\u672c\u7ae0\u672b\u5c3e\u4f5c\u4e1a\u6846\u67b6\u6a21\u62df\u7684\u662f\u4e00\u4e2a\u652f\u6301\u7c7b\u4f3c\u201c\u591a\u9053\u7a0b\u5e8f\u201d\u7684\u534f\u4f5c\u5f0f\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <p>\u6458\u4e00\u4e0b rCore \u591a\u9053\u7a0b\u5e8f\u4e0e\u534f\u4f5c\u5f0f\u8c03\u5ea6 \u7684\u5185\u5bb9\uff1a</p> <p>\u591a\u9053\u7a0b\u5e8f\u7684\u601d\u60f3\u5728\u4e8e\uff1a\u5185\u6838\u540c\u65f6\u7ba1\u7406\u591a\u4e2a\u5e94\u7528\u3002 \u5982\u679c\u5916\u8bbe\u5904\u7406 I/O \u7684\u65f6\u95f4\u8db3\u591f\u957f\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5148\u8fdb\u884c\u4efb\u52a1\u5207\u6362\u53bb\u6267\u884c\u5176\u4ed6\u5e94\u7528\uff1b\u5728\u67d0\u6b21\u5207\u6362\u56de\u6765\u4e4b\u540e\uff0c\u5e94\u7528\u518d\u6b21\u8bfb\u53d6\u8bbe\u5907\u5bc4\u5b58\u5668\uff0c\u53d1\u73b0 I/O \u8bf7\u6c42\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6839\u636e\u8fd4\u56de\u7684 I/O \u7ed3\u679c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\u4e86\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u8981\u540c\u65f6\u5b58\u5728\u7684\u5e94\u7528\u8db3\u591f\u591a\uff0c\u5c31\u80fd\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9690\u85cf I/O \u5916\u8bbe\u5904\u7406\u76f8\u5bf9\u4e8e CPU \u7684\u5ef6\u8fdf\uff0c\u4fdd\u8bc1 CPU \u4e0d\u5fc5\u6d6a\u8d39\u65f6\u95f4\u5728\u7b49\u5f85\u5916\u8bbe\u4e0a\uff0c\u800c\u662f\u51e0\u4e4e\u4e00\u76f4\u5728\u8fdb\u884c\u8ba1\u7b97\u3002</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u4efb\u610f\u5207\u6362\u7684\u201c\u65e0\u9650\u201d\u591a CPU \u7684\u5047\u8c61\uff0c\u6211\u4eec\u9700\u8981 \u865a\u62df\u5316 CPU \u548c \u4e0a\u4e0b\u6587\u5207\u6362 \u3002</p>"},{"location":"cs/os/ostep/04processes.html#_1","title":"\u4f5c\u4e1a","text":"<p>Question</p> <p>1\uff0e\u7528\u4ee5\u4e0b\u6807\u5fd7\u8fd0\u884c\u7a0b\u5e8f\uff1a./process-run.py -l 5:100,5:100\u3002CPU \u5229\u7528\u7387\uff08CPU \u4f7f\u7528\u65f6\u95f4\u7684\u767e\u5206\u6bd4\uff09\u5e94\u8be5\u662f\u591a\u5c11\uff1f\u4e3a\u4ec0\u4e48\u4f60\u77e5\u9053\u8fd9\u4e00\u70b9\uff1f\u5229\u7528 -c \u6807\u8bb0\u67e5\u770b\u4f60\u7684\u7b54\u6848\u662f\u5426\u6b63\u786e\u3002</p> <p>Answer</p> <p><code>5</code> \u662f\u6307\u4ee4\u6570\u91cf\uff0c<code>100</code> \u662f \u4e0d\u5207\u6362 IO \u7684\u673a\u7387\uff0c\u6240\u4ee5\u8fd9\u662f\u4e24\u4e2a\u4e94\u6761\u6307\u4ee4\u7684\u7eaf CPU \u7a0b\u5e8f\uff0c\u5b83\u4eec\u5e94\u8be5\u4f1a\u4e00\u76f4\u4f7f\u7528 CPU \uff0c\u5229\u7528\u7387\u4e3a 100% \u3002</p> python process-run.py -l 5:100,5:100 -c<pre><code>Time        PID: 0        PID: 1           CPU           IOs\n  1        RUN:cpu         READY             1\n  2        RUN:cpu         READY             1\n  3        RUN:cpu         READY             1\n  4        RUN:cpu         READY             1\n  5        RUN:cpu         READY             1\n  6           DONE       RUN:cpu             1\n  7           DONE       RUN:cpu             1\n  8           DONE       RUN:cpu             1\n  9           DONE       RUN:cpu             1\n 10           DONE       RUN:cpu             1\n</code></pre> <p>Question</p> <p>2\uff0e\u73b0\u5728\u7528\u8fd9\u4e9b\u6807\u5fd7\u8fd0\u884c\uff1a./process-run.py -l 4:100,1:0\u3002\u8fd9\u4e9b\u6807\u5fd7\u6307\u5b9a\u4e86\u4e00\u4e2a\u5305\u542b 4 \u6761\u6307\u4ee4\u7684\u8fdb\u7a0b\uff08\u90fd\u8981\u4f7f\u7528 CPU\uff09\uff0c\u5e76\u4e14\u53ea\u662f\u7b80\u5355\u5730\u53d1\u51fa I/O \u5e76\u7b49\u5f85\u5b83\u5b8c\u6210\u3002\u5b8c\u6210\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u9700\u8981\u591a\u957f\u65f6\u95f4\uff1f\u5229\u7528-c \u68c0\u67e5\u4f60\u7684\u7b54\u6848\u662f\u5426\u6b63\u786e\u3002</p> <p>Answer</p> <p>IO \u64cd\u4f5c\u65f6\u957f\u9ed8\u8ba4\u503c\u662f <code>5</code> \uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981 <code>4 + 7 = 11</code> \u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u56e0\u4e3a <code>io</code> \u548c <code>io_done</code> \u64cd\u4f5c\u4e5f\u5360\u7528\u65f6\u95f4\uff0c\u6240\u4ee5\u662f <code>7</code> \u4e0d\u662f <code>5</code> \u3002</p> python process-run.py -l 4:100,1:0 -c<pre><code>Time        PID: 0        PID: 1           CPU           IOs\n  1        RUN:cpu         READY             1\n  2        RUN:cpu         READY             1\n  3        RUN:cpu         READY             1\n  4        RUN:cpu         READY             1\n  5           DONE        RUN:io             1\n  6           DONE       BLOCKED                           1\n  7           DONE       BLOCKED                           1\n  8           DONE       BLOCKED                           1\n  9           DONE       BLOCKED                           1\n 10           DONE       BLOCKED                           1\n 11*          DONE   RUN:io_done             1\n</code></pre> <p>Question</p> <p>3\uff0e\u73b0\u5728\u4ea4\u6362\u8fdb\u7a0b\u7684\u987a\u5e8f\uff1a./process-run.py -l 1:0,4:100\u3002\u73b0\u5728\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u4ea4\u6362\u987a\u5e8f\u662f\u5426\u91cd\u8981\uff1f\u4e3a\u4ec0\u4e48\uff1f\u540c\u6837\uff0c\u7528-c \u770b\u770b\u4f60\u7684\u7b54\u6848\u662f\u5426\u6b63\u786e\u3002</p> <p>Answer</p> <p>\u5982\u679c\u5148 <code>RUN:io</code> \u7684\u8bdd\uff0c\u5c31\u4f1a\u8282\u7701\u5f88\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u4e4b\u524d\u7a0b\u5e8f 0 \u7ed3\u675f\u4e86\u624d\u5f00\u59cb IO \uff0c\u6d6a\u8d39\u4e86\u4e00\u4e9b\u3002</p> python process-run.py -l 1:0,4:100 -c<pre><code>Time        PID: 0        PID: 1           CPU           IOs\n  1         RUN:io         READY             1\n  2        BLOCKED       RUN:cpu             1             1\n  3        BLOCKED       RUN:cpu             1             1\n  4        BLOCKED       RUN:cpu             1             1\n  5        BLOCKED       RUN:cpu             1             1\n  6        BLOCKED          DONE                           1\n  7*   RUN:io_done          DONE             1\n</code></pre> <p>Question</p> <p>4\uff0e\u73b0\u5728\u63a2\u7d22\u53e6\u4e00\u4e9b\u6807\u5fd7\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u6807\u5fd7\u662f-S\uff0c\u5b83\u51b3\u5b9a\u4e86\u5f53\u8fdb\u7a0b\u53d1\u51fa I/O \u65f6\u7cfb\u7edf\u5982\u4f55\u53cd\u5e94\u3002\u5c06\u6807\u5fd7\u8bbe\u7f6e\u4e3a SWITCH_ON_END\uff0c\u5728\u8fdb\u7a0b\u8fdb\u884c I/O \u64cd\u4f5c\u65f6\uff0c\u7cfb\u7edf\u5c06\u4e0d\u4f1a\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u800c\u662f\u7b49\u5f85\u8fdb\u7a0b\u5b8c\u6210\u3002\u5f53\u4f60\u8fd0\u884c\u4ee5\u4e0b\u4e24\u4e2a\u8fdb\u7a0b\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1f\u4e00\u4e2a\u6267\u884c I/O\uff0c\u53e6\u4e00\u4e2a\u6267\u884c CPU \u5de5\u4f5c\u3002\uff08-l 1:0,4:100 -c -S SWITCH_ON_END\uff09</p> <p>Answer</p> <p>\u5982\u679c\u5728 IO \u64cd\u4f5c\u7684\u7a0b\u5e8f\u4e0d\u8ba9\u51fa CPU \u7684\u8bdd\uff0c\u5176\u4ed6\u7a0b\u5e8f\u53ea\u80fd\u4e00\u76f4\u7b49\u5f85\u4e86\u3002</p> python process-run.py -l 1:0,4:100 -c -S SWITCH_ON_END<pre><code>Time        PID: 0        PID: 1           CPU           IOs\n  1         RUN:io         READY             1\n  2        BLOCKED         READY                           1\n  3        BLOCKED         READY                           1\n  4        BLOCKED         READY                           1\n  5        BLOCKED         READY                           1\n  6        BLOCKED         READY                           1\n  7*   RUN:io_done         READY             1\n  8           DONE       RUN:cpu             1\n  9           DONE       RUN:cpu             1\n 10           DONE       RUN:cpu             1\n 11           DONE       RUN:cpu             1\n</code></pre> <p>Question</p> <p>5\uff0e\u73b0\u5728\uff0c\u8fd0\u884c\u76f8\u540c\u7684\u8fdb\u7a0b\uff0c\u4f46\u5207\u6362\u884c\u4e3a\u8bbe\u7f6e\uff0c\u5728\u7b49\u5f85 I/O \u65f6\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff08-l 1:0,4:100-c -S SWITCH_ON_IO\uff09\u3002\u73b0\u5728\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u5229\u7528-c \u6765\u786e\u8ba4\u4f60\u7684\u7b54\u6848\u662f\u5426\u6b63\u786e\u3002</p> <p>Answer</p> <p><code>SWITCH_ON_IO</code> \u5c31\u662f\u9ed8\u8ba4\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u548c\u4e0a\u4e0a\u6b21\u8fd0\u884c\u7ed3\u679c\u4e0d\u4f1a\u6709\u5dee\u522b\u3002</p> python process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO<pre><code>Time        PID: 0        PID: 1           CPU           IOs\n  1         RUN:io         READY             1\n  2        BLOCKED       RUN:cpu             1             1\n  3        BLOCKED       RUN:cpu             1             1\n  4        BLOCKED       RUN:cpu             1             1\n  5        BLOCKED       RUN:cpu             1             1\n  6        BLOCKED          DONE                           1\n  7*   RUN:io_done          DONE             1\n</code></pre> <p>Question</p> <p>6\uff0e\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u884c\u4e3a\u662f I/O \u5b8c\u6210\u65f6\u8981\u505a\u4ec0\u4e48\u3002\u5229\u7528-I IO_RUN_LATER\uff0c\u5f53 I/O \u5b8c\u6210\u65f6\uff0c\u53d1\u51fa\u5b83\u7684\u8fdb\u7a0b\u4e0d\u4e00\u5b9a\u9a6c\u4e0a\u8fd0\u884c\u3002\u76f8\u53cd\uff0c\u5f53\u65f6\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e00\u76f4\u8fd0\u884c\u3002\u5f53\u4f60\u8fd0\u884c\u8fd9\u4e2a\u8fdb\u7a0b\u7ec4\u5408\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\uff08./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p\uff09\u7cfb\u7edf\u8d44\u6e90\u662f\u5426\u88ab\u6709\u6548\u5229\u7528\uff1f</p> <p>Answer</p> <p>\u7a0b\u5e8f 0 \u8fd0\u884c\u5b8c\u4e0d\u4f1a\u7acb\u9a6c\u8fd0\u884c\uff0c\u4f1a\u5207\u5230 <code>READY</code> \u72b6\u6001\uff0c\u7b49\u5f85\u5176\u4ed6\u7a0b\u5e8f\u4ea4\u51fa CPU \u4f7f\u7528\u6743\u3002 \u6d6a\u8d39\u4e86\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\uff0c\u7a0b\u5e8f 2 \u548c 3 \u4e00\u76f4\u5360\u7528\u7740 CPU \u5bfc\u81f4\u7a0b\u5e8f 1 \u6ca1\u6cd5\u8fdb\u884c\u4e0b\u4e00\u4e2a IO \u64cd\u4f5c\uff0c\u5982\u679c IO \u64cd\u4f5c \u4e0e CPU \u64cd\u4f5c\u4e00\u8d77\u6267\u884c\u5c31\u4f1a\u66f4\u8282\u7701\u3002</p> python process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p<pre><code>Time        PID: 0        PID: 1        PID: 2        PID: 3           CPU           IOs\n  1         RUN:io         READY         READY         READY             1\n  2        BLOCKED       RUN:cpu         READY         READY             1             1\n  3        BLOCKED       RUN:cpu         READY         READY             1             1\n  4        BLOCKED       RUN:cpu         READY         READY             1             1\n  5        BLOCKED       RUN:cpu         READY         READY             1             1\n  6        BLOCKED       RUN:cpu         READY         READY             1             1\n  7*         READY          DONE       RUN:cpu         READY             1\n  8          READY          DONE       RUN:cpu         READY             1\n  9          READY          DONE       RUN:cpu         READY             1\n 10          READY          DONE       RUN:cpu         READY             1\n 11          READY          DONE       RUN:cpu         READY             1\n 12          READY          DONE          DONE       RUN:cpu             1\n 13          READY          DONE          DONE       RUN:cpu             1\n 14          READY          DONE          DONE       RUN:cpu             1\n 15          READY          DONE          DONE       RUN:cpu             1\n 16          READY          DONE          DONE       RUN:cpu             1\n 17    RUN:io_done          DONE          DONE          DONE             1\n 18         RUN:io          DONE          DONE          DONE             1\n 19        BLOCKED          DONE          DONE          DONE                           1\n 20        BLOCKED          DONE          DONE          DONE                           1\n 21        BLOCKED          DONE          DONE          DONE                           1\n 22        BLOCKED          DONE          DONE          DONE                           1\n 23        BLOCKED          DONE          DONE          DONE                           1\n 24*   RUN:io_done          DONE          DONE          DONE             1\n 25         RUN:io          DONE          DONE          DONE             1\n 26        BLOCKED          DONE          DONE          DONE                           1\n 27        BLOCKED          DONE          DONE          DONE                           1\n 28        BLOCKED          DONE          DONE          DONE                           1\n 29        BLOCKED          DONE          DONE          DONE                           1\n 30        BLOCKED          DONE          DONE          DONE                           1\n 31*   RUN:io_done          DONE          DONE          DONE             1\n\nStats: Total Time 31\nStats: CPU Busy 21 (67.74%)\nStats: IO Busy  15 (48.39%)\n</code></pre> <p>Question</p> <p>7\uff0e\u73b0\u5728\u8fd0\u884c\u76f8\u540c\u7684\u8fdb\u7a0b\uff0c\u4f46\u4f7f\u7528-I IO_RUN_IMMEDIATE \u8bbe\u7f6e\uff0c\u8be5\u8bbe\u7f6e\u7acb\u5373\u8fd0\u884c\u53d1\u51faI/O \u7684\u8fdb\u7a0b\u3002\u8fd9\u79cd\u884c\u4e3a\u6709\u4f55\u4e0d\u540c\uff1f\u4e3a\u4ec0\u4e48\u8fd0\u884c\u4e00\u4e2a\u521a\u521a\u5b8c\u6210 I/O \u7684\u8fdb\u7a0b\u4f1a\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff1f</p> <p>Answer</p> <p>I/O \u5b8c\u6210\uff0c\u4e00\u822c\u610f\u5473\u7740\u8fdb\u7a0b\u5df2\u7ecf\u83b7\u5f97\u4e86\u6267\u884c\u6240\u9700\u7684\u8d44\u6e90\u3002\u7acb\u5373\u8fd0\u884c\u8fd9\u6837\u7684\u8fdb\u7a0b\u53ef\u4ee5\u51cf\u5c11\u5728\u51c6\u5907\u72b6\u6001\u4e0b\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u5f53\u7136\u8fd9\u91cc\u56e0\u4e3a\u5b83\u53ea\u6709 IO \u64cd\u4f5c\uff0c\u6240\u4ee5\u4e00\u76f4\u8fd0\u884c\u5b83\u603b\u6ca1\u9519\u3002</p> python process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p<pre><code>Time        PID: 0        PID: 1        PID: 2        PID: 3           CPU           IOs\n  1         RUN:io         READY         READY         READY             1\n  2        BLOCKED       RUN:cpu         READY         READY             1             1\n  3        BLOCKED       RUN:cpu         READY         READY             1             1\n  4        BLOCKED       RUN:cpu         READY         READY             1             1\n  5        BLOCKED       RUN:cpu         READY         READY             1             1\n  6        BLOCKED       RUN:cpu         READY         READY             1             1\n  7*   RUN:io_done          DONE         READY         READY             1\n  8         RUN:io          DONE         READY         READY             1\n  9        BLOCKED          DONE       RUN:cpu         READY             1             1\n 10        BLOCKED          DONE       RUN:cpu         READY             1             1\n 11        BLOCKED          DONE       RUN:cpu         READY             1             1\n 12        BLOCKED          DONE       RUN:cpu         READY             1             1\n 13        BLOCKED          DONE       RUN:cpu         READY             1             1\n 14*   RUN:io_done          DONE          DONE         READY             1\n 15         RUN:io          DONE          DONE         READY             1\n 16        BLOCKED          DONE          DONE       RUN:cpu             1             1\n 17        BLOCKED          DONE          DONE       RUN:cpu             1             1\n 18        BLOCKED          DONE          DONE       RUN:cpu             1             1\n 19        BLOCKED          DONE          DONE       RUN:cpu             1             1\n 20        BLOCKED          DONE          DONE       RUN:cpu             1             1\n 21*   RUN:io_done          DONE          DONE          DONE             1\n\nStats: Total Time 21\nStats: CPU Busy 21 (100.00%)\nStats: IO Busy  15 (71.43%)\n</code></pre> <p>Question</p> <p>8\uff0e\u73b0\u5728\u8fd0\u884c\u4e00\u4e9b\u968f\u673a\u751f\u6210\u7684\u8fdb\u7a0b\uff0c\u4f8b\u5982-s 1 -l 3:50,3:50, -s 2 -l 3:50,3:50, -s 3 -l 3:50,3:50\u3002\u770b\u770b\u4f60\u662f\u5426\u80fd\u9884\u6d4b\u8ffd\u8e2a\u8bb0\u5f55\u4f1a\u5982\u4f55\u53d8\u5316\uff1f\u5f53\u4f60\u4f7f\u7528-I IO_RUN_IMMEDIATE \u4e0e-I IO_RUN_LATER \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u5f53\u4f60\u4f7f\u7528-S SWITCH_ON_IO \u4e0e-S SWITCH_ON_END \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>Answer</p> <p>\u7d2f\u4e86\uff0c\u6d4b\u4e0d\u52a8\u4e86\u3002</p>"},{"location":"cs/os/ostep/05process_api.html","title":"\u7b2c 5 \u7ae0 \u63d2\u53d9\uff1a\u8fdb\u7a0b API","text":"<p>\u8fd9\u7ae0\u53ea\u662f\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u6709\u5173\u8fdb\u7a0b\u7684 API \u3002</p> \u7cfb\u7edf\u8c03\u7528 \u529f\u80fd \u8fd4\u56de\u503c \u5907\u6ce8 fork \u521b\u5efa\u5b50\u8fdb\u7a0b \u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID \uff0c\u5b50\u8fdb\u7a0b\u4e2d\u8fd4\u56de <code>0</code> \uff0c\u5931\u8d25\u65f6\u8fd4\u56de <code>-1</code> \u5b50\u8fdb\u7a0b\u4f1a\u590d\u5236\u4e00\u4efd\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\u5185\u5bb9\uff0c\u4f46\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd0\u884c <code>mmap</code> \u7b49\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd wait \u7b49\u5f85\u5b50\u8fdb\u7a0b\u8fd0\u884c\u5b8c\u6bd5 \u6210\u529f\u65f6\u8fd4\u56de\u7ed3\u675f\u7684\u5b50\u8fdb\u7a0b PID \uff0c\u5931\u8d25\u65f6\u8fd4\u56de <code>-1</code> \u8c03\u7528 <code>wait()</code> \u7b49\u4e8e\u8c03\u7528 <code>waitpid(-1, &amp;wstatus, 0)</code> \uff0c\u4f1a\u7b49\u5f85\u4efb\u610f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f exec \u6267\u884c\u65b0\u7684\u7a0b\u5e8f \u53ea\u6709\u53d1\u751f\u9519\u8bef\u624d\u4f1a\u8fd4\u56de\uff0c\u8fd4\u56de <code>-1</code> \u5b83\u5b9e\u9645\u505a\u7684\u662f\u4f7f\u7528\u65b0\u7684\u8fdb\u7a0b\u6620\u50cf\u66ff\u6362\u5f53\u524d\u8fdb\u7a0b\u6620\u50cf\uff0c\u4ece\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d\u52a0\u8f7d\u4ee3\u7801\u548c\u9759\u6001\u6570\u636e\uff0c\u5e76\u7528\u5b83\u8986\u5199\u81ea\u5df1\u7684\u4ee3\u7801\u6bb5\uff08\u4ee5\u53ca\u9759\u6001\u6570\u636e\uff09\uff0c\u5806\u3001\u6808\u53ca\u5176\u4ed6\u5185\u5b58\u7a7a\u95f4\u4e5f\u4f1a\u88ab\u91cd\u65b0\u521d\u59cb\u5316\u3002\u6240\u4ee5 <code>exec()</code> \u7b49\u51fd\u6570\u6267\u884c\u6210\u529f\u540e\u6ca1\u6cd5\u8fd4\u56de\uff0c\u56e0\u4e3a\u539f\u6709\u7684\u7a0b\u5e8f\u5df2\u7ecf\u88ab\u66ff\u6362\u4e86 <p>\u4f5c\u4e1a\u4e2d\u4f1a\u7528\u5230\u66f4\u591a\u3002</p> <p>\u624b\u518c\uff1aLinux man pages online</p>"},{"location":"cs/os/ostep/05process_api.html#_1","title":"\u4f5c\u4e1a","text":"<p>Question</p> <p>1\uff0e\u7f16\u5199\u4e00\u4e2a\u8c03\u7528 fork()\u7684\u7a0b\u5e8f\u3002\u5728\u8c03\u7528 fork()\u4e4b\u524d\uff0c\u8ba9\u4e3b\u8fdb\u7a0b\u8bbf\u95ee\u4e00\u4e2a\u53d8\u91cf\uff08\u4f8b\u5982 x\uff09\u5e76\u5c06\u5176\u503c\u8bbe\u7f6e\u4e3a\u67d0\u4e2a\u503c\uff08\u4f8b\u5982 100\uff09\u3002\u5b50\u8fdb\u7a0b\u4e2d\u7684\u53d8\u91cf\u6709\u4ec0\u4e48\u503c\uff1f\u5f53\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u6539\u53d8 x\u7684\u503c\uff0c\u53d8\u91cf\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>Answer</p> q1.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    int x;\n    x = 100;\n\n    pid_t rc = fork();\n    assert(rc &gt;= 0);\n\n    if (rc == 0) {\n        for (size_t i = 0; i &lt; 5; ++i) {\n            printf(\"Child(%d):\\tx = %d\\n\", getpid(), x);\n            x += 100;\n            printf(\"Child(%d):\\tx += 100\\n\", getpid());\n            sleep(1);\n        }\n    } else {\n        for (size_t i = 0; i &lt; 5; ++i) {\n            printf(\"Parent(%d):\\tx = %d\\n\", getpid(), x);\n            x += 70;\n            printf(\"Parent(%d):\\tx += 70\\n\", getpid());\n            sleep(1);\n        }\n    }\n\n    return 0;\n}\n</code></pre> cc q1.c -o q1 -Wall -Wextra -pedantic &amp;&amp; ./q1<pre><code>Parent(13645):  x = 100\nParent(13645):  x += 70\nChild(13646):   x = 100\nChild(13646):   x += 100\nParent(13645):  x = 170\nParent(13645):  x += 70\nChild(13646):   x = 200\nChild(13646):   x += 100\nParent(13645):  x = 240\nParent(13645):  x += 70\nChild(13646):   x = 300\nChild(13646):   x += 100\nChild(13646):   x = 400\nParent(13645):  x = 310\nChild(13646):   x += 100\nParent(13645):  x += 70\nChild(13646):   x = 500\nParent(13645):  x = 380\nChild(13646):   x += 100\nParent(13645):  x += 70\n</code></pre> <p>\u5b50\u8fdb\u7a0b\u83b7\u5f97\u4e86\u7236\u8fdb\u7a0b\u6570\u636e\u6bb5\u3001\u5806\u548c\u6808\u7684\u526f\u672c\uff0c\u610f\u5473\u7740\u5b50\u8fdb\u7a0b\u4e2d\u7684 <code>x</code> \u4f1a\u6709\u4e0e\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u521d\u59cb\u503c <code>100</code> \uff0c\u4f46\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e2d\u7684 <code>x</code> \u662f\u5f7c\u6b64\u72ec\u7acb\u7684\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002</p> <p>Question</p> <p>2\uff0e\u7f16\u5199\u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u7684\u7a0b\u5e8f\uff08\u4f7f\u7528 open()\u7cfb\u7edf\u8c03\u7528\uff09\uff0c\u7136\u540e\u8c03\u7528 fork()\u521b\u5efa\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u3002\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbf\u95ee open()\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5417\uff1f\u5f53\u5b83\u4eec\u5e76\u53d1\uff08\u5373\u540c\u65f6\uff09\u5199\u5165\u6587\u4ef6\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>Answer</p> q2.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    pid_t rc = fork();\n    assert(rc &gt;= 0);\n\n    int fd = open(\"/tmp/testfile\", O_WRONLY | O_CREAT | O_APPEND, S_IRWXU);\n    assert(fd &gt; -1);\n\n    if (rc == 0) {\n        assert(fcntl(fd, F_GETFL, 0) != -1);\n        assert(write(fd, \"bbbbbbbb\", 8) != -1);\n    } else {\n        assert(fcntl(fd, F_GETFL, 0) != -1);\n        assert(write(fd, \"aaaaaaaa\", 8) != -1);\n    }\n\n    close(fd);\n    return 0;\n}\n</code></pre> cc q2.c -o q2 -Wall -Wextra -pedantic &amp;&amp; ./q2 &amp;&amp; cat /tmp/testfile<pre><code>aaaaaaaabbbbbbbb\n</code></pre> <p>\u6587\u4ef6\u63cf\u8ff0\u7b26\u5728\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u4e2d\u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e14\u5173\u95ed\u63cf\u8ff0\u7b26\u4e92\u4e0d\u5f71\u54cd\u3002 \u540c\u65f6\u5199\u5165\u7684\u8bdd\uff0c\u597d\u50cf\u6ca1\u95ee\u9898\uff1f\u6570\u636e\u91cf\u5c0f\u4e8e <code>PIPE_BUF</code> \u65f6 <code>write</code> \u770b\u8d77\u6765\u50cf\u539f\u5b50\u7684\u3002</p> <p>Question</p> <p>3\uff0e\u4f7f\u7528 fork()\u7f16\u5199\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u3002\u5b50\u8fdb\u7a0b\u5e94\u6253\u5370\u201chello\u201d\uff0c\u7236\u8fdb\u7a0b\u5e94\u6253\u5370\u201cgoodbye\u201d\u3002\u4f60\u5e94\u8be5\u5c1d\u8bd5\u786e\u4fdd\u5b50\u8fdb\u7a0b\u59cb\u7ec8\u5148\u6253\u5370\u3002\u4f60\u80fd\u5426\u4e0d\u5728\u7236\u8fdb\u7a0b\u8c03\u7528 wait()\u800c\u505a\u5230\u8fd9\u4e00\u70b9\u5462\uff1f</p> <p>Answer</p> q3.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    pid_t rc = vfork();\n    assert(rc &gt;= 0);\n\n    if (rc == 0) {\n        printf(\"hello\");\n    } else {\n        printf(\"goodbye\");\n    }\n\n    return 0;\n}\n</code></pre> cc q3.c -o q3 -Wall -Wextra -pedantic &amp;&amp; ./q3<pre><code>hellogoodbye\n</code></pre> <p><code>vfork</code> \u4e0e <code>fork</code> \u7684\u533a\u522b\u662f\uff0c\u5b83\u4f1a\u963b\u585e\u7236\u8fdb\u7a0b\u76f4\u5230\u5b50\u8fdb\u7a0b\u9000\u51fa\uff0c\u800c\u4e14\u4e0d\u4f1a\u5b8c\u5168\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002</p> <p>Question</p> <p>4\uff0e\u7f16\u5199\u4e00\u4e2a\u8c03\u7528 fork()\u7684\u7a0b\u5e8f\uff0c\u7136\u540e\u8c03\u7528\u67d0\u79cd\u5f62\u5f0f\u7684 exec()\u6765\u8fd0\u884c\u7a0b\u5e8f/bin/ls\u3002\u770b\u770b\u662f\u5426\u53ef\u4ee5\u5c1d\u8bd5 exec()\u7684\u6240\u6709\u53d8\u4f53\uff0c\u5305\u62ec execl()\u3001execle()\u3001execlp()\u3001execv()\u3001execvp()\u548c execvP()\u3002\u4e3a\u4ec0\u4e48\u540c\u6837\u7684\u57fa\u672c\u8c03\u7528\u4f1a\u6709\u8fd9\u4e48\u591a\u53d8\u79cd\uff1f</p> <p>\u53d8\u79cd\u5f88\u591a\uff0c\u547d\u540d\u89c4\u5219\u90fd\u662f <code>exec</code> + \u540e\u7f00\u3002</p> <ul> <li><code>l</code> \u4ee3\u8868 list \uff0c\u4ee5\u53ef\u53d8\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u9700\u8981 <code>(char*)NULL</code> \u7ed3\u5c3e</li> <li><code>v</code> \u4ee3\u8868 vector \uff0c\u4ee5 <code>char *argv[]</code> \u7684\u5f62\u5f0f\u4f20\u9012\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u9700\u8981 <code>NULL</code> \u7ed3\u5c3e</li> <li><code>e</code> \u4ee3\u8868 environment \uff0c\u652f\u6301\u4f20\u9012\u73af\u5883\u53d8\u91cf\uff0c\u9700\u8981 <code>NULL</code> \u7ed3\u5c3e</li> <li><code>p</code> \u4ee3\u8868 path \uff0c\u5728 PATH \u73af\u5883\u53d8\u91cf\u4e2d\u641c\u7d22\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u800c\u4e0d\u9700\u8981\u63d0\u4f9b\u5b8c\u6574\u8def\u5f84</li> </ul> <p>\u4f8b\u5982 <code>execve</code> \u9700\u8981\u4f20\u9012\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u5e76\u4f7f\u7528\u6570\u7ec4\u4f20\u9012\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u4e14\u53ef\u4ee5\u4f20\u9012\u73af\u5883\u53d8\u91cf\u3002</p> <p>\u8fd9\u4e9b\u53d8\u79cd\u63d0\u4f9b\u4e86\u4e0d\u540c\u7ea7\u522b\u7684\u7075\u6d3b\u6027\u548c\u63a7\u5236\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u51fd\u6570\u3002</p> <pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    for (int i = 0; i &lt; 5; i++) {\n        pid_t pid = fork();\n        assert(pid &gt;= 0);\n\n        if (pid == 0) {\n            char* args[] = {\"ls\", \"-l\", NULL};\n            char* env[] = {NULL};\n\n            switch (i) {\n                case 0:\n                    printf(\"execl:\\n\");\n                    execl(\"/bin/ls\", \"ls\", \"-l\", (char*)NULL);\n                    break;\n                case 1:\n                    printf(\"execle:\\n\");\n                    execle(\"/bin/ls\", \"ls\", \"-l\", (char*)NULL, env);\n                    break;\n                case 2:\n                    printf(\"execlp:\\n\");\n                    execlp(\"ls\", \"ls\", \"-l\", (char*)NULL);\n                    break;\n                case 3:\n                    printf(\"execv:\\n\");\n                    execv(\"/bin/ls\", args);\n                    break;\n                case 4:\n                    printf(\"execvp:\\n\");\n                    execvp(\"ls\", args);\n                    break;\n            }\n\n            perror(\"exec\");\n            return 1;\n        } else {\n            wait(NULL);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>Question</p> <p>5\uff0e\u73b0\u5728\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5728\u7236\u8fdb\u7a0b\u4e2d\u4f7f\u7528 wait()\uff0c\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002wait()\u8fd4\u56de\u4ec0\u4e48\uff1f\u5982\u679c\u4f60\u5728\u5b50\u8fdb\u7a0b\u4e2d\u4f7f\u7528 wait()\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>Answer</p> q5.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    pid_t pid = fork();\n    assert(pid &gt;= 0);\n\n    if (pid == 0) {\n        printf(\"child PID: %d\\n\", getpid());\n        return wait(NULL);\n    } else {\n        int status;\n        pid_t child_pid = wait(&amp;status);\n        assert(child_pid &gt;= 0);\n\n        if (WIFEXITED(status)) {\n            printf(\"normal termination of child (%d), exit status: %d\\n\",\n                   child_pid, WEXITSTATUS(status));\n        }\n        return 0;\n    }\n}\n</code></pre> cc q5.c -o q5 -Wall -Wextra -pedantic &amp;&amp; ./q5<pre><code>child PID: 46008\nnormal termination of child (46008), exit status: 255\n</code></pre> <p>\u7236\u8fdb\u7a0b\u4e2d\u4f7f\u7528 <code>wait()</code> \u8fd4\u56de\u5df2\u505c\u6b62\u5b50\u8fdb\u7a0b\u7684 PID \uff0c\u8fd8\u4f1a\u987a\u5e26\u8bbe\u7f6e\u72b6\u6001\u4fe1\u606f\u3002 \u5982\u679c\u5728\u5b50\u8fdb\u7a0b\uff08\u6ca1\u6709\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\uff09\u4e2d\u4f7f\u7528 <code>wait()</code> \u4f1a\u51fa\u9519\u8fd4\u56de <code>-1</code> \u3002</p> <p>Question</p> <p>6\uff0e\u5bf9\u524d\u4e00\u4e2a\u7a0b\u5e8f\u7a0d\u4f5c\u4fee\u6539\uff0c\u8fd9\u6b21\u4f7f\u7528 waitpid()\u800c\u4e0d\u662f wait()\u3002\u4ec0\u4e48\u65f6\u5019 waitpid()\u4f1a\u6709\u7528\uff1f</p> <p>Answer</p> p6.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    pid_t pid = fork();\n    assert(pid &gt;= 0);\n\n    if (pid == 0) {\n        printf(\"child PID: %d\\n\", getpid());\n        return wait(NULL);\n    } else {\n        int status;\n        pid_t child_pid = waitpid(pid, &amp;status, WUNTRACED);\n        assert(child_pid &gt;= 0);\n\n        if (WIFEXITED(status)) {\n            printf(\"normal termination of child (%d), exit status: %d\\n\",\n                   child_pid, WEXITSTATUS(status));\n        }\n        return 0;\n    }\n}\n</code></pre> cc q6.c -o q6 -Wall -Wextra -pedantic &amp;&amp; ./q6<pre><code>child PID: 46011\nnormal termination of child (46011), exit status: 255\n</code></pre> <p><code>waitpid</code> \u53ef\u4ee5\u7b49\u5f85\u67d0\u4e2a\u6307\u5b9a PID \u7684\u5b50\u8fdb\u7a0b\uff0c\u800c\u4e14\u62e5\u6709\u66f4\u7075\u6d3b\u7684\u9009\u9879\u53c2\u6570\u3002</p> <p>Question</p> <p>7\uff0e\u7f16\u5199\u4e00\u4e2a\u521b\u5efa\u5b50\u8fdb\u7a0b\u7684\u7a0b\u5e8f\uff0c\u7136\u540e\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5173\u95ed\u6807\u51c6\u8f93\u51fa\uff08STDOUT_FILENO\uff09\u3002\u5982\u679c\u5b50\u8fdb\u7a0b\u5728\u5173\u95ed\u63cf\u8ff0\u7b26\u540e\u8c03\u7528 printf()\u6253\u5370\u8f93\u51fa\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f</p> <p>Answer</p> q7.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    pid_t pid = fork();\n    assert(pid &gt;= 0);\n\n    if (pid == 0) {\n        close(STDOUT_FILENO);\n        printf(\"child PID: %d\\n\", getpid());\n    } else {\n        int status;\n        pid_t child_pid = wait(&amp;status);\n        assert(child_pid &gt;= 0);\n\n        if (WIFEXITED(status)) {\n            printf(\"normal termination of child (%d), exit status: %d\\n\",\n                   child_pid, WEXITSTATUS(status));\n        }\n    }\n    return 0;\n}\n</code></pre> cc q7.c -o q7 -Wall -Wextra -pedantic &amp;&amp; ./q7<pre><code>normal termination of child (47157), exit status: 0\n</code></pre> <p>\u540c\u4e4b\u524d\u7684\u4f8b\u5b50\uff0c\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u5f71\u54cd\u672c\u8fdb\u7a0b\u3002</p> <p>Question</p> <p>8\uff0e\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u521b\u5efa\u4e24\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5e76\u4f7f\u7528 pipe()\u7cfb\u7edf\u8c03\u7528\uff0c\u5c06\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u51fa\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u5165\u3002</p> <p>Answer</p> q8.c<pre><code>#include &lt;assert.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    int fd[2];\n    assert(pipe(fd) != -1);\n\n    char buf[25] = {0};\n    pid_t child_process[2];\n\n    for (int i = 0; i &lt; 2; ++i) {\n        pid_t pid = fork();\n        assert(pid &gt;= 0);\n\n        if (pid == 0) {\n            switch (i) {\n                case 0:\n                    dup2(fd[1], STDOUT_FILENO);\n                    printf(\"Message from child %d\\n\", getpid());\n                    fflush(stdout);\n                    break;\n                case 1:\n                    dup2(fd[0], STDIN_FILENO);\n                    fgets(buf, 25, stdin);\n                    printf(\"Received message: %s\", buf);\n                    break;\n            }\n            return 0;\n        } else {\n            child_process[i] = pid;\n        }\n    }\n\n    waitpid(child_process[0], NULL, 0);\n    waitpid(child_process[1], NULL, 0);\n\n    return 0;\n}\n</code></pre> cc q8.c -o q8 -Wall -Wextra -pedantic &amp;&amp; ./q8<pre><code>Received message: Message from child 5786\n</code></pre>"},{"location":"cs/os/ostep/06direct_execution.html","title":"\u7b2c 6 \u7ae0 \u673a\u5236\uff1a\u53d7\u9650\u76f4\u63a5\u6267\u884c","text":"<p>\u8fd9\u7ae0\u662f\u8bb2\u7279\u6743\u7ea7\u673a\u5236\u548c\u8fdb\u7a0b\u8c03\u5ea6\u7684\uff0c\u4ecb\u7ecd\u865a\u62df\u5316 CPU \u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u7684\u95ee\u9898\u4ee5\u53ca\u89e3\u51b3\u65b9\u6848\uff0c\u5bf9\u5e94\uff1a</p> <ul> <li>rCore-Tutorial-Book \u7279\u6743\u7ea7\u673a\u5236</li> <li>rCore-Tutorial-Book \u591a\u9053\u7a0b\u5e8f\u4e0e\u5206\u65f6\u591a\u4efb\u52a1</li> </ul>"},{"location":"cs/os/ostep/06direct_execution.html#61","title":"6.1 \u57fa\u672c\u6280\u5de7\uff1a\u53d7\u9650\u76f4\u63a5\u6267\u884c","text":"<p>\u65ad\u53e5\u662f\u201c\u53d7\u9650\u201d\u548c\u201c\u76f4\u63a5\u6267\u884c\u201d\u3002</p> <p>\u76f4\u63a5\u6267\u884c\u6307\u7684\u662f\u76f4\u63a5\u5728 CPU \u4e0a\u8fd0\u884c\u7a0b\u5e8f\u3002\u64cd\u4f5c\u7cfb\u7edf\u542f\u52a8\u7a0b\u5e8f\u7684\u65f6\u5019\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u628a\u7a0b\u5e8f\u7684\u4ee3\u7801\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u5185\u5b58\u91cc\uff0c\u627e\u5230\u5165\u53e3\u70b9\uff0c\u8df3\u8f6c\u8fdb\u53bb\u8fd0\u884c\u3002</p> \u64cd\u4f5c\u7cfb\u7edf \u7a0b\u5e8f \u5728\u8fdb\u7a0b\u5217\u8868\u4e0a\u521b\u5efa\u6761\u76ee\u4e3a\u7a0b\u5e8f\u5206\u914d\u5185\u5b58\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u6839\u636e <code>argc</code> / <code>argv</code> \u8bbe\u7f6e\u7a0b\u5e8f\u6808 \u6e05\u9664\u5bc4\u5b58\u5668\u6267\u884c <code>call main()</code> \u65b9\u6cd5 \u6267\u884c <code>main()</code> \u4ece <code>main</code> \u4e2d\u6267\u884c <code>return</code> \u91ca\u653e\u8fdb\u7a0b\u7684\u5185\u5b58\u5c06\u8fdb\u7a0b\u4ece\u8fdb\u7a0b\u5217\u8868\u6e05\u9664 <p>\u8fd9\u79cd\u65b9\u6cd5\u5728\u865a\u62df\u5316 CPU \u65f6\u4f1a\u4ea7\u751f\u4e24\u4e2a\u95ee\u9898\uff1a</p> <ol> <li>\u600e\u4e48\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u505a\u4efb\u4f55\u4e0d\u5e0c\u671b\u5b83\u505a\u7684\u4e8b\uff0c\u540c\u65f6\u8fd8\u80fd\u9ad8\u6548\u8fd0\u884c</li> <li>\u5982\u4f55\u8ba9\u8fdb\u7a0b\u505c\u4e0b\u6765\u5e76\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b</li> </ol> <p>\u201c\u53d7\u9650\u201d\uff0c\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u3002</p>"},{"location":"cs/os/ostep/06direct_execution.html#62-1","title":"6.2 \u95ee\u9898 1\uff1a\u53d7\u9650\u5236\u7684\u64cd\u4f5c","text":"<p>\u901a\u8fc7\u5f15\u5165\u65b0\u7684\u5904\u7406\u5668\u6a21\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u8fdb\u7a0b\u5728\u4e0d\u540c\u7a0b\u5ea6\u4e0a\u53d7\u9650\u3002</p> <p>\u6bd4\u5982\u5728 \u7528\u6237\u6a21\u5f0f \u4e0b\u8fdb\u7a0b\u4e0d\u80fd\u53d1\u9001 I/O \u8bf7\u6c42\uff0c\u4f1a\u5bfc\u81f4\u5904\u7406\u5668\u5f15\u53d1\u5f02\u5e38\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u7ec8\u6b62\u8fdb\u7a0b\u3002\u800c \u5185\u6838\u6a21\u5f0f \u53ef\u4ee5\u505a\u8fd9\u4e9b\u53d7\u9650\u6307\u4ee4\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5c31\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u3002</p> <p>\u5982\u679c\u7528\u6237\u5e0c\u671b\u6267\u884c\u67d0\u79cd\u7279\u6743\u64cd\u4f5c\uff08\u5982\u4ece\u78c1\u76d8\u8bfb\u53d6\uff09\uff0c\u9700\u8981\u6267\u884c \u7cfb\u7edf\u8c03\u7528 \uff0c\u8fd9\u662f\u5185\u6838\u60f3\u7528\u6237\u7a0b\u5e8f\u66b4\u9732\u7684\u67d0\u4e9b\u5173\u952e\u529f\u80fd\uff0c\u8b6c\u5982\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u3001\u521b\u5efa\u9500\u6bc1\u8fdb\u7a0b\u3001\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u901a\u4fe1\uff0c\u4ee5\u53ca\u5206\u914d\u66f4\u591a\u5185\u5b58\u3002</p> <p>\u5982\u679c\u8981\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u9700\u8981\u6267\u884c\u7279\u6b8a\u7684\u6307\u4ee4\uff0c\u79f0\u4e3a \u9677\u5165\uff08Trap\uff09\uff0c\u5b83\u4f7f\u7a0b\u5e8f\u63a7\u5236\u6d41\u8df3\u5165\u5185\u6838\u5e76\u5c06\u7279\u6743\u7ea7\u522b\u63d0\u5347\u5230\u5185\u6838\u6a21\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6267\u884c\u7279\u6743\u64cd\u4f5c\u4e86\u3002\u5728\u5b8c\u6210\u540e\u518d\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u6307\u4ee4\u4ece\u9677\u5165\u8fd4\u56de\u3002</p> <p>OSTEP \u7ffb\u8bd1\u4e3a\u201c\u9677\u9631\u201d\uff0crCore \u7ffb\u8bd1\u4e3a\u201c\u9677\u5165\u201d\uff0c\u603b\u4e4b...It's A Trap!</p> <p>\u786c\u4ef6\u901a\u8fc7\u63d0\u4f9b\u4e0d\u540c\u7684\u6267\u884c\u6a21\u5f0f\u6765\u534f\u52a9\u64cd\u4f5c\u7cfb\u7edf\u3002\u5728\u7528\u6237\u6a21\u5f0f\uff08user mode\uff09\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5b8c\u5168\u8bbf\u95ee\u786c\u4ef6\u8d44\u6e90\u3002\u5728\u5185\u6838\u6a21\u5f0f\uff08kernel mode\uff09\u4e0b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u8bbf\u95ee\u673a\u5668\u7684\u5168\u90e8\u8d44\u6e90\u3002\u8fd8\u63d0\u4f9b\u4e86\u9677\u5165\uff08trap\uff09\u5185\u6838\u548c\u4ece\u9677\u9631\u8fd4\u56de\uff08return-from-trap\uff09\u5230\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\u7684\u7279\u522b\u8bf4\u660e\uff0c\u4ee5\u53ca\u4e00\u4e9b\u6307\u4ee4\uff0c\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u544a\u8bc9\u786c\u4ef6\u9677\u9631\u8868\uff08trap table\uff09\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <p>\u8865\u5145\uff1a\u4e3a\u4ec0\u4e48\u7cfb\u7edf\u8c03\u7528\u770b\u8d77\u6765\u50cf\u8fc7\u7a0b\u8c03\u7528</p> <p>\u5728 C \u8bed\u8a00\u4e2d <code>open()</code>\u3001<code>read()</code> \u770b\u8d77\u6765\u5b8c\u5168\u662f\u8fc7\u7a0b\u8c03\u7528\u7684\u5f62\u5f0f\uff0c\u7cfb\u7edf\u662f\u5982\u4f55\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u5462\uff1f \u539f\u56e0\u5f88\u7b80\u5355\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u8fc7\u7a0b\u8c03\u7528\uff0c\u4f46\u9690\u85cf\u5728\u5185\u90e8\u7684\u662f\u9677\u5165\u6307\u4ee4\u3002 \u5f53\u8c03\u7528 <code>open()</code> \u65f6\u6b63\u5728\u6267\u884c\u5bf9 C \u5e93\u7684\u8fc7\u7a0b\u8c03\u7528\uff0c\u4f46\u5728\u5e93\u51fd\u6570\u4e2d\u662f\u624b\u5de5\u7f16\u7801\u7684\u6c47\u7f16\u6307\u4ee4\uff0c\u4e3a\u4e86\u6b63\u786e\u5730\u7cfb\u7edf\u8c03\u7528\u3002 \u6240\u4ee5\uff0c\u80fd\u76f4\u63a5\u8c03\u7528\u5e93\u51fd\u6570\u6765\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf\u662f\u56e0\u4e3a\u6709\u4eba\u5df2\u7ecf\u4e3a\u4f60\u5199\u4e86\u6c47\u7f16\u3002</p> \u64cd\u4f5c\u7cfb\u7edf@\u542f\u52a8\uff08\u5185\u6838\u6a21\u5f0f\uff09 \u786c\u4ef6 \u521d\u59cb\u5316\u9677\u9631\u8868 \u8bb0\u4f4f\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740 \u64cd\u4f5c\u7cfb\u7edf@\u8fd0\u884c\uff08\u5185\u6838\u6a21\u5f0f\uff09 \u786c\u4ef6 \u7a0b\u5e8f\uff08\u5e94\u7528\u6a21\u5f0f\uff09 \u5728\u8fdb\u7a0b\u5217\u8868\u4e0a\u521b\u5efa\u6761\u76ee\u4e3a\u7a0b\u5e8f\u5206\u914d\u5185\u5b58\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u6839\u636e <code>argv</code> \u8bbe\u7f6e\u7a0b\u5e8f\u6808\u7528\u5bc4\u5b58\u5668/\u7a0b\u5e8f\u8ba1\u6570\u5668\u586b\u5145\u5185\u6838\u6808\u4ece\u9677\u9631\u8fd4\u56de \u4ece\u5185\u6838\u6808\u6062\u590d\u5bc4\u5b58\u5668\u8f6c\u5411\u7528\u6237\u6a21\u5f0f\u8df3\u5230 <code>main</code> \u8fd0\u884c <code>main</code>\u2026\u2026\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u9677\u5165\u64cd\u4f5c\u7cfb\u7edf \u5c06\u5bc4\u5b58\u5668\u4fdd\u5b58\u5230\u5185\u6838\u6808\u8f6c\u5411\u5185\u6838\u6a21\u5f0f\u8df3\u5230\u9677\u9631\u5904\u7406\u7a0b\u5e8f \u5904\u7406\u9677\u9631\u505a\u7cfb\u7edf\u8c03\u7528\u7684\u5de5\u4f5c\u4ece\u9677\u9631\u8fd4\u56de \u4ece\u5185\u6838\u6808\u6062\u590d\u5bc4\u5b58\u5668\u8f6c\u5411\u7528\u6237\u6a21\u5f0f\u8df3\u5230\u9677\u9631\u4e4b\u540e\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668 \u2026\u2026\u4ece <code>main</code> \u8fd4\u56de   \u9677\u5165\uff08\u901a\u8fc7 <code>exit()</code>\uff09 \u91ca\u653e\u8fdb\u7a0b\u7684\u5185\u5b58\u5c06\u8fdb\u7a0b\u4ece\u8fdb\u7a0b\u5217\u8868\u4e2d\u6e05\u9664"},{"location":"cs/os/ostep/06direct_execution.html#63-2","title":"6.3 \u95ee\u9898 2\uff1a\u5728\u8fdb\u7a0b\u4e4b\u95f4\u5207\u6362","text":"<p>\u5982\u679c\u8fdb\u7a0b\u5728 CPU \u4e0a\u8fd0\u884c\uff0c\u90a3\u64cd\u4f5c\u7cfb\u7edf\u5c31\u201c\u6ca1\u6709\u8fd0\u884c\u201d\uff0c\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u8fd0\u884c\uff0c\u5b83\u5c31\u6ca1\u529e\u6cd5\u5207\u6362\u8fdb\u7a0b\u4e86\uff0c\u6240\u4ee5\u91cd\u70b9\u5728\u4e8e \u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u91cd\u65b0\u83b7\u5f97 CPU \u7684\u63a7\u5236\u6743\u3002</p>"},{"location":"cs/os/ostep/06direct_execution.html#_1","title":"\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff1a\u7b49\u5f85\u7cfb\u7edf\u8c03\u7528","text":"<p>\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff08Cooperative Scheduling\uff09\u91cc\uff0c\u64cd\u4f5c\u7cfb\u7edf\u76f8\u4fe1\u8fdb\u7a0b\u4f1a\u5408\u7406\u8fd0\u884c\uff0c\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u5c31\u901a\u8fc7 <code>yield</code> \u4e3b\u52a8\u628a CPU \u4ea4\u56de\u64cd\u4f5c\u7cfb\u7edf\u3002</p> <p>\u5982\u679c\u67d0\u4e2a\u8fdb\u7a0b\u65e0\u610f\u6216\u6709\u610f\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u4e0d\u4f7f\u7528 <code>yield</code> \uff0c\u4e5f\u4e0d\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u638c\u63a7\u4e3b\u52a8\u6743\uff0c\u90a3\u5c31\u6211\u4eec\u5c31\u88ab\u6c38\u8fdc\u5730\u201c\u56f0\u4f4f\u201d\u4e86\u3002</p> <p>\uff08\u5f53\u7136\uff0c\u8fd8\u6709\u4e07\u80fd\u5730\u89e3\u51b3\u65b9\u5f0f\u2014\u2014\u2014\u91cd\u542f\uff09</p>"},{"location":"cs/os/ostep/06direct_execution.html#_2","title":"\u975e\u534f\u4f5c\u65b9\u5f0f\uff1a\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u63a7\u5236","text":"<p>\u4e3a\u4e86\u64cd\u4f5c\u7cfb\u7edf\u91cd\u83b7 CPU \u7684\u63a7\u5236\u6743\uff0c\u4eba\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u7b54\u6848\uff1a\u65f6\u949f\u4e2d\u65ad\uff08timer interrupt\uff09\u3002</p> <p>\u65f6\u949f\u8bbe\u5907\u53ef\u4ee5\u7f16\u7a0b\u4e3a\u6bcf\u9694\u51e0\u6beb\u79d2\u4ea7\u751f\u4e00\u6b21\u4e2d\u65ad\uff0c\u4ea7\u751f\u4e2d\u65ad\u65f6\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u4f1a\u88ab\u6682\u505c\uff0c\u8f6c\u800c\u8fd0\u884c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u9884\u5148\u914d\u7f6e\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08interrupt handler\uff09\uff0c\u8fd9\u6837\u64cd\u4f5c\u7cfb\u7edf\u5c31\u91cd\u65b0\u83b7\u5f97\u4e86 CPU \u7684\u63a7\u5236\u6743\u3002</p>"},{"location":"cs/os/ostep/06direct_execution.html#_3","title":"\u4fdd\u5b58\u548c\u6062\u590d\u4e0a\u4e0b\u6587","text":"<p>\u65e2\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u91cd\u65b0\u83b7\u5f97\u4e86\u63a7\u5236\u6743\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u534f\u4f5c\uff0c\u8fd8\u662f\u901a\u8fc7\u65f6\u949f\u4e2d\u65ad\u66f4\u5f3a\u5236\u6267\u884c\uff0c\u90fd\u5fc5\u987b\u51b3\u5b9a\uff1a\u662f\u7ee7\u7eed\u8fd0\u884c\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u8fd8\u662f\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002\u8fd9\u4e2a\u51b3\u5b9a\u662f\u7531\u8c03\u5ea6\u7a0b\u5e8f\uff08scheduler\uff09\u505a\u51fa\u7684\uff0c\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u5982\u679c\u51b3\u5b9a\u8fdb\u884c\u5207\u6362\uff0cOS \u5c31\u4f1a\u6267\u884c\u4e00\u4e9b\u5e95\u5c42\u4ee3\u7801\uff0c\u5373\u6240\u8c13\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff08context switch\uff09\u3002\u4e0a\u4e0b\u6587\u5207\u6362\u5728\u6982\u5ff5\u4e0a\u5f88\u7b80\u5355\uff1a\u64cd\u4f5c\u7cfb\u7edf\u8981\u505a\u7684\u5c31\u662f\u4e3a\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u8fdb\u7a0b\u4fdd\u5b58\u4e00\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff08\u4f8b\u5982\uff0c\u5230\u5b83\u7684\u5185\u6838\u6808\uff09\uff0c\u5e76\u4e3a\u5373\u5c06\u6267\u884c\u7684\u8fdb\u7a0b\u6062\u590d\u4e00\u4e9b\u5bc4\u5b58\u5668\u7684\u503c\uff08\u4ece\u5b83\u7684\u5185\u6838\u6808\uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u53ef\u4ee5\u786e\u4fdd\u6700\u540e\u6267\u884c\u4ece\u9677\u9631\u8fd4\u56de\u6307\u4ee4\u65f6\uff0c\u4e0d\u662f\u8fd4\u56de\u5230\u4e4b\u524d\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u800c\u662f\u7ee7\u7eed\u6267\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u3002</p> \u64cd\u4f5c\u7cfb\u7edf@\u542f\u52a8\uff08\u5185\u6838\u6a21\u5f0f\uff09 \u786c\u4ef6 \u521d\u59cb\u5316\u9677\u9631\u8868 \u8bb0\u4f4f\u4ee5\u4e0b\u5730\u5740\uff1a\u00a0\u00a0\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u00a0\u00a0\u65f6\u949f\u5904\u7406\u7a0b\u5e8f \u542f\u52a8\u4e2d\u65ad\u65f6\u949f \u542f\u52a8\u65f6\u949f\u6bcf\u9694 x ms \u4e2d\u65ad CPU \u64cd\u4f5c\u7cfb\u7edf@\u8fd0\u884c\uff08\u5185\u6838\u6a21\u5f0f\uff09 \u786c\u4ef6 \u7a0b\u5e8f\uff08\u5e94\u7528\u6a21\u5f0f\uff09 \u8fdb\u7a0b A\u2026\u2026 \u65f6\u949f\u4e2d\u65ad\u5c06\u5bc4\u5b58\u5668\uff08A\uff09\u4fdd\u5b58\u5230\u5185\u6838\u6808\uff08A\uff09\u8f6c\u5411\u5185\u6838\u6a21\u5f0f\u8df3\u5230\u9677\u9631\u5904\u7406\u7a0b\u5e8f \u5904\u7406\u9677\u9631\u8c03\u7528 <code>switch()</code> \u4f8b\u7a0b\u00a0\u00a0\u5c06\u5bc4\u5b58\u5668\uff08A\uff09\u4fdd\u5b58\u5230\u8fdb\u7a0b\u7ed3\u6784\uff08A\uff09\u00a0\u00a0\u5c06\u8fdb\u7a0b\u7ed3\u6784\uff08B\uff09\u6062\u590d\u5230\u5bc4\u5b58\u5668\uff08B\uff09\u4ece\u9677\u9631\u8fd4\u56de\uff08\u8fdb\u5165 B\uff09 \u4ece\u5185\u6838\u6808\uff08B\uff09\u6062\u590d\u5bc4\u5b58\u5668\uff08B\uff09\u8f6c\u5411\u7528\u6237\u6a21\u5f0f\u8df3\u5230 B \u7684\u7a0b\u5e8f\u8ba1\u6570\u5668 \u8fdb\u7a0b B\u2026\u2026"},{"location":"cs/os/ostep/06direct_execution.html#_4","title":"\u5bf9\u8fdb\u7a0b\u8c03\u5ea6\u65b9\u5f0f\u7684\u603b\u7ed3","text":"<p>\u7b2c\u56db\u7ae0\u4f5c\u4e1a\u4e2d\u7684 <code>process-run.py</code> \u5b9e\u73b0\u4e86\u4e00\u4e2a\u534f\u4f5c\u5f0f\u7684\u8fdb\u7a0b\u8c03\u5ea6\u6846\u67b6\uff0c\u8fdb\u7a0b\u5728\u6267\u884c\u4e00\u5b9a\u6570\u91cf\u7684\u6307\u4ee4\u540e\u4e3b\u52a8\u8ba9\u51fa CPU \uff0c\u6216\u8005\u5728\u53d1\u8d77 I/O \u64cd\u4f5c\u540e\u7b49\u5f85 I/O \u5b8c\u6210\u3002</p> <p>\u534f\u4f5c\u5f0f\u8c03\u5ea6\u7684\u7279\u70b9\u662f\u8fdb\u7a0b\u81ea\u613f\u5730\u8ba9\u51fa CPU \u63a7\u5236\u6743\uff0c\u5728\u7b80\u5355\u6613\u7528\u7684\u540c\u65f6\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u95ee\u9898\uff1a</p> <ul> <li>\u4e00\u4e2a\u8fdb\u7a0b\u5d29\u6e83\u6216\u9677\u5165\u65e0\u9650\u5faa\u73af\u53ef\u80fd\u4f1a\u5f71\u54cd\u6574\u4e2a\u7cfb\u7edf</li> <li>\u4e0d\u9002\u5408\u5904\u7406\u5b9e\u65f6\u4ea4\u4e92\u7684\u4efb\u52a1</li> </ul> <p>\u4e8e\u662f\u5c31\u884d\u751f\u51fa\u4e86 \u62a2\u5360\u5f0f\u8c03\u5ea6 \uff0c\u8fd0\u884c\u4e00\u4e2a\u8fdb\u7a0b\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u8fd0\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5982\u6b64\u8f6e\u6362\u3002</p> <p>\u5b9e\u73b0\u8d77\u6765\u4f1a\u66f4\u52a0\u590d\u6742\uff0c\u4f46\u62e5\u6709\u4e86\u66f4\u5f3a\u7684\u7cfb\u7edf\u7a33\u5b9a\u6027\uff0c\u66f4\u9002\u5408\u5904\u7406\u5b9e\u65f6\u4efb\u52a1\u3002</p> <p>\u5f15\u7528 rCore-Tutorial-Book \u5206\u65f6\u591a\u4efb\u52a1\u7cfb\u7edf\u7684\u80cc\u666f \u7684\u4ecb\u7ecd\uff1a</p> <p>\u4ece\u73b0\u5728\u7684\u773c\u5149\u6765\u770b\uff0c\u5f53\u65f6\u7684\u5e94\u7528\u66f4\u591a\u662f\u4e00\u79cd \u540e\u53f0\u5e94\u7528 (Background Application) \uff0c\u5728\u5c06\u5b83\u52a0\u5165\u6267\u884c\u961f\u5217\u4e4b\u540e\u6211\u4eec\u53ea\u9700\u5b9a\u671f\u786e\u8ba4\u5b83\u7684\u8fd0\u884c\u72b6\u6001\u3002 \u800c\u968f\u7740\u6280\u672f\u7684\u53d1\u5c55\uff0c\u6d8c\u73b0\u4e86\u8d8a\u6765\u8d8a\u591a\u7684 \u4ea4\u4e92\u5f0f\u5e94\u7528 (Interactive Application) \uff0c\u5b83\u4eec\u8981\u8fbe\u6210\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u6807\u5c31\u662f\u63d0\u9ad8\u7528\u6237\uff08\u5e94\u7528\u7684\u4f7f\u7528\u8005\u548c\u5f00\u53d1\u8005\uff09\u64cd\u4f5c\u7684\u54cd\u5e94\u901f\u5ea6\uff0c\u51cf\u5c11 \u5ef6\u8fdf \uff08Latency\uff09\uff0c\u8fd9\u6837\u624d\u80fd\u4f18\u5316\u5e94\u7528\u7684\u4f7f\u7528\u4f53\u9a8c\u548c\u5f00\u53d1\u4f53\u9a8c\u3002</p> <p>\u5bf9\u4e8e\u8fd9\u4e9b\u5e94\u7528\u800c\u8a00\uff0c\u5373\u4f7f\u9700\u8981\u7b49\u5f85\u5916\u8bbe\u6216\u67d0\u4e9b\u4e8b\u4ef6\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u503e\u5411\u4e8e\u4e3b\u52a8 yield \u4ea4\u51fa CPU \u4f7f\u7528\u6743\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u80fd\u4f1a\u5e26\u6765\u65e0\u6cd5\u63a5\u53d7\u7684\u5ef6\u8fdf\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5e94\u7528\u4e4b\u95f4\u66f4\u591a\u7684\u662f\u4e92\u76f8\u7ade\u4e89\u5b9d\u8d35\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u800c\u4e0d\u662f\u76f8\u4e92\u5408\u4f5c\u3002</p> <p>\u5982\u679c\u5e94\u7528\u81ea\u5df1\u5f88\u5c11 yield \uff0c\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5c31\u8981\u5f00\u59cb\u6536\u56de\u4e4b\u524d\u4e0b\u653e\u7684\u6743\u529b\uff0c\u7531\u5b83\u81ea\u5df1\u5bf9 CPU \u8d44\u6e90\u8fdb\u884c\u96c6\u4e2d\u7ba1\u7406\u5e76\u5408\u7406\u5206\u914d\u7ed9\u5404\u5e94\u7528\uff0c\u8fd9\u5c31\u662f\u5185\u6838\u9700\u8981\u63d0\u4f9b\u7684\u4efb\u52a1\u8c03\u5ea6\u80fd\u529b\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u9053\u7a0b\u5e8f\u7684\u8c03\u5ea6\u673a\u5236\u5206\u7c7b\u6210</p> <ul> <li>\u534f\u4f5c\u5f0f\u8c03\u5ea6 (Cooperative Scheduling) \uff0c\u56e0\u4e3a\u5b83\u7684\u7279\u5f81\u662f\uff1a\u53ea\u8981\u4e00\u4e2a\u5e94\u7528\u4e0d\u4e3b\u52a8 yield \u4ea4\u51fa CPU \u4f7f\u7528\u6743\uff0c\u5b83\u5c31\u4f1a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb\u3002</li> <li>\u4e0e\u4e4b\u76f8\u5bf9\uff0c \u62a2\u5360\u5f0f\u8c03\u5ea6 (Preemptive Scheduling) \u5219\u662f\u5e94\u7528 \u968f\u65f6 \u90fd\u6709\u88ab\u5185\u6838\u5207\u6362\u51fa\u53bb\u7684\u53ef\u80fd\u3002</li> </ul>"},{"location":"cs/os/ostep/06direct_execution.html#_5","title":"\u4f5c\u4e1a","text":"<pre><code>#define _GNU_SOURCE\n#include &lt;assert.h&gt;\n#include &lt;sched.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;unistd.h&gt;\n\n#define ITERATIONS 1000000.0\n\nint main(void) {\n    // system call\n    struct timeval time_before, time_after;\n\n    gettimeofday(&amp;time_before, NULL);\n    for (size_t i = 0; i &lt; ITERATIONS; i++) {\n        getpid();\n    }\n    gettimeofday(&amp;time_after, NULL);\n\n    double elapsed_time = (1000000 * time_after.tv_sec + time_after.tv_usec) -\n                          (1000000 * time_before.tv_sec + time_before.tv_usec);\n    printf(\"the average time of system call: %.2f us\\n\",\n           elapsed_time / ITERATIONS * 1000);\n\n    // context switch\n    int first_pipe[2];\n    int second_pipe[2];\n    cpu_set_t cpu_set;\n    CPU_ZERO(&amp;cpu_set);\n    CPU_SET(0, &amp;cpu_set);\n\n    assert(pipe(first_pipe) == 0);\n    assert(pipe(second_pipe) == 0);\n\n    pid_t pid = fork();\n    assert(pid &gt;= 0);\n\n    if (pid == 0) {\n        sched_setaffinity(getpid(), sizeof(cpu_set_t), &amp;cpu_set);\n\n        for (size_t i = 0; i &lt; ITERATIONS; i++) {\n            write(first_pipe[0], NULL, 0);\n            read(second_pipe[1], NULL, 0);\n        }\n    } else {\n        sched_setaffinity(getpid(), sizeof(cpu_set_t), &amp;cpu_set);\n\n        gettimeofday(&amp;time_before, NULL);\n        for (size_t i = 0; i &lt; ITERATIONS; i++) {\n            write(second_pipe[0], NULL, 0);\n            read(first_pipe[1], NULL, 0);\n        }\n        gettimeofday(&amp;time_after, NULL);\n\n        double elapsed_time =\n            (1000000 * time_after.tv_sec + time_after.tv_usec) -\n            (1000000 * time_before.tv_sec + time_before.tv_usec);\n        printf(\"the average time of context switch: %.2f us\\n\",\n               elapsed_time / ITERATIONS * 1000);\n    }\n\n    return 0;\n}\n</code></pre> gcc test.c -o test -Wall -Wextra &amp;&amp; ./test<pre><code>the average time of system call: 128.36 us\nthe average time of context switch: 520.91 us\n</code></pre> <p>\u6211\u4e5f\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6570\u636e\u5bf9\u4e0d\u5bf9\uff0cGPT \u8bf4\u4e0a\u4e0b\u6587\u5207\u6362\u57fa\u672c\u5728\u7eb3\u79d2\u7ea7\uff0c\u53ef\u80fd\u662f\u5bf9\u7684\u5427\u3002</p>"},{"location":"cs/pl/index.html","title":"Programming Language &amp; ISA","text":""},{"location":"cs/pl/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>C<ul> <li>\u901a\u8fc7 HTTPS \u5305\u542b\u5934\u6587\u4ef6</li> </ul> </li> <li>Python</li> <li>Racket</li> <li>RISC-V ISA</li> <li>Rust</li> </ul>"},{"location":"cs/pl/c/index.html","title":"C","text":""},{"location":"cs/pl/c/including_c_files_over_https.html","title":"\u901a\u8fc7 HTTPS \u5305\u542b\u5934\u6587\u4ef6","text":"<p>\u8fd9\u7bc7\u6587\u7ae0\u4f1a\u5b9e\u73b0\u4ee5\u4e0b\u6548\u679c\uff0c\u8ba9 C \u8bed\u8a00\u53ef\u4ee5\u4ece\u4e92\u8054\u7f51\u4e0a <code>#include</code> \u5934\u6587\u4ef6\u3002</p> include_files_from_internet.c<pre><code>#define STB_SPRINTF_IMPLEMENTATION\n#include &lt;https://raw.githubusercontent.com/nothings/stb/master/stb_sprintf.h&gt; // &lt;- look at this \n#include &lt;stdio.h&gt;\n\nint main() {\n    char buffer[20];\n\n    // Using functions defined by stb_sprintf.h\n    stbsp_sprintf(buffer, \"Hello %s\", \"NAVI\");\n    puts(buffer);\n\n    return 0;\n}\n</code></pre> <p>\u4f60\u77e5\u9053\u7684\uff0c4202 \u5e74\uff0cEverything Over HTTPS\uff08\u7b11\uff09\u3002</p>"},{"location":"cs/pl/c/including_c_files_over_https.html#_1","title":"\u8d77\u56e0","text":"<p>@rexim 2021 \u5e74\u7684\u65f6\u5019\u53d1\u4e86\u4e00\u4e2a\u89c6\u9891\uff1aIncluding C File Over HTTPS \uff0c\u4ed6\u901a\u8fc7\u4fee\u6539 TinyCC \u7f16\u8bd1\u5668\u5b8c\u6210\u4e86\u4e0a\u8ff0\u6548\u679c\u3002\u4f46\u662f\u73b0\u5728 TCC \u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u4ed6\u7684\u8865\u4e01\u4e0d\u80fd\u7528\u4e86\u3002</p> <p>\u6211\u8bd5\u7740\u91cd\u65b0\u5206\u6790\u4e86 TCC \u7684\u6e90\u7801\uff0c\u5199\u4e86\u4efd\u65b0\u7684 Patch \uff0c\u8fd9\u7bc7\u6587\u7ae0\u7528\u4e8e\u8bb0\u5f55\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u3002</p>"},{"location":"cs/pl/c/including_c_files_over_https.html#wip","title":"WIP...","text":""},{"location":"cs/pl/c/including_c_files_over_https.html#_2","title":"\u53c2\u9605","text":"<ul> <li>TinyCC Wiki page: https://en.wikipedia.org/wiki/Tiny_C_Compiler</li> <li>TinyCC Git Repo (GitHub): https://github.com/TinyCC/tinycc</li> <li>STB libs: https://github.com/nothings/stb</li> <li>libcurl HTTPS example: https://curl.se/libcurl/c/https.html</li> <li>libcurl URL parseing example: https://curl.se/libcurl/c/parseurl.html</li> <li>@rexim's Patch: https://gist.github.com/rexim/a6636976d12f67ea530ece118a700317</li> <li>@rexim's Video: https://www.youtube.com/watch?v=4vSyqK3SK-0</li> <li>My Patch: https://gist.github.com/13m0n4de/84912522cce6db31da069baf1add04f8</li> </ul>"},{"location":"cs/pl/python/index.html","title":"Python","text":""},{"location":"cs/pl/racket/index.html","title":"Racket","text":""},{"location":"cs/pl/riscv/index.html","title":"RISC-V ISA","text":""},{"location":"cs/pl/rust/index.html","title":"Rust","text":""},{"location":"ctf/index.html","title":"Capture The Flag","text":""},{"location":"gamedev/index.html","title":"Game Development &amp; Game Design","text":""},{"location":"sec/index.html","title":"Security","text":""},{"location":"writeups/index.html","title":"Writeups","text":""}]}